from pyx_build import PyxBaseBuildScript, pull, app_name, app_version, python_version, submodule, repository

class PyxBuildScript(PyxBaseBuildScript):

    # Write your buildscript here

    # Define custom repositories to retrieve dependencies from. If it's not overridden, then the
    # parent method would be called, which would just provide the pypi repository
    def repositories():
        # repository("https://pypi.org/")

    # This will download the dependencies of your project using pyxpm (PyX Project Manager).
    # Define a dependency with the dependency(name, version) method.
    def dependencies():
        # pull("dependency_name", version="1.0.0")

    # Decide whether to build a distributed executable or an egg package
    def build_distributed_executables():
        # return true

    # Define application details 
    def application_details():
        # app_name("My_App")
        # app_version("1.0.0")
        # python_version("3.8.2")

    # List the submodules you would want to include in the package
    def submodules():
        # submodule(name="sub_module_name")

    # Executed when project is built
    def build(build_distributed_executable):
        super.build(build_distributed_executable)
        # Write code for executing extra stuff while building

    def run():
        super.run()
        # Write code for executing extra stuff while running

    def register_tasks():
        super.register_tasks() # The super call should not be removed
        super.add_task(task1) 
        super.add_task(task2)

    def task1():
        print("Executing task 1")
        
    def task2():
        print("Executing task 2")

    
